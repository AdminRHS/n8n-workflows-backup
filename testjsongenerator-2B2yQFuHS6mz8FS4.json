{"createdAt":"2025-03-11T11:31:21.617Z","updatedAt":"2025-03-11T13:56:25.000Z","id":"2B2yQFuHS6mz8FS4","name":"TestJSONGenerator","active":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"TestJSONGenerator","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-240,0],"id":"de1415ea-77ea-40e0-a75f-098171d7dbcf","name":"Webhook","webhookId":"3a439b42-5a74-4a90-98a7-43622f370585"},{"parameters":{"jsCode":"// Function Node в n8n (async)\nasync function run() {\n  // Получаем входной массив\n  const items = $input.all();\n  const newItems = [];\n  \n  // Функция для обработки одного объекта\n  async function processItem(obj) {\n    // Если есть поле testWebhook\n    if (obj.testWebhook) {\n      // Формируем новый URL: просто prepend \"https://r.jina.ai/\" к исходному testWebhook\n      const newURL = \"https://r.jina.ai/\" + obj.testWebhook;\n      let response;\n      try {\n        response = await fetch(newURL);\n      } catch (err) {\n        return {\n          day: obj.day,\n          lesson: obj.lesson,\n          testContent: { error: \"Fetch error: \" + err.message }\n        };\n      }\n      let data;\n      try {\n        data = await response.json();\n      } catch (err) {\n        // Если не получилось распарсить как JSON, возвращаем текст\n        data = { error: \"JSON parse error\", raw: await response.text() };\n      }\n      return {\n        day: obj.day,\n        lesson: obj.lesson,\n        testContent: data\n      };\n    } else {\n      // Если поле отсутствует, возвращаем исходный объект\n      return obj;\n    }\n  }\n  \n  // Если входной элемент содержит массив в одном объекте\n  if (items.length === 1 && Array.isArray(items[0].json)) {\n    for (const obj of items[0].json) {\n      const processed = await processItem(obj);\n      newItems.push({ json: processed });\n    }\n  } else {\n    // Если каждый item – отдельный объект\n    for (const item of items) {\n      const processed = await processItem(item.json);\n      newItems.push({ json: processed });\n    }\n  }\n  \n  return newItems;\n}\n\nreturn await run();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-20,0],"id":"8b8307ce-2e3e-4d77-9ae1-53da22792ded","name":"Code"}],"connections":{"Webhook":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"1cc1d80b-61aa-44d3-83f9-738f0fd9efd9","triggerCount":1,"tags":[{"createdAt":"2025-03-03T09:45:59.203Z","updatedAt":"2025-03-03T09:45:59.203Z","id":"Fm7JeKGvgj23tI31","name":"Tests"},{"createdAt":"2025-03-04T10:52:07.036Z","updatedAt":"2025-03-04T10:52:07.036Z","id":"PgMCrQDmXgYzQdJC","name":"JSON"},{"createdAt":"2025-02-28T12:15:59.970Z","updatedAt":"2025-02-28T12:15:59.970Z","id":"sdWf5s6naE3QVMN8","name":"Onboarding"}]}