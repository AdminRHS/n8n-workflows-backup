{"createdAt":"2025-04-15T12:50:40.326Z","updatedAt":"2025-04-15T14:52:42.000Z","id":"llHyu5eJMTWgwI4S","name":"Sales automat part 2","active":false,"nodes":[{"parameters":{"method":"POST","url":"https://hook.eu2.make.com/ha0xladgffsp156aqzplnmlxwx8iq5np","sendBody":true,"bodyParameters":{"parameters":[{"name":"message","value":"=Conduct a detailed and in-depth research of the company at the address {{ $json.url }} using open sources and marketing analysis to find job postings, check the company's status (active/inactive, financial situation, news), find out when the website was last updated, check the date of the last publication on social media, establish the industry affiliation, and evaluate online activity; based on the information obtained, create a personalized commercial offer for this company, focusing on the fact that our company, Remote Helpers, offers highly qualified remote employees for IT and digital marketing, with a special emphasis on skills in the field of AI (development, use of AI tools, data analysis using AI), which includes a full recruitment, training, and management cycle with flexible employment options (full-time/part-time, project solutions) through modern tools and corporate culture support, while not disclosing confidential information.\n\nPlease provide me output only with extracted information in structured format, without \"okay i need, i will give you or something else\""}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[520,-200],"id":"f353fe06-886f-410a-9b65-fa99383f69d4","name":"HTTP Request"},{"parameters":{"jsCode":"// Получаем HTML-текст из предыдущей ноды\nlet description = $input.first().json.description;\n\n// Массив для хранения результатов с URL и датой\nlet records = [];\n\n// Обновлённое регулярное выражение, которое ищет блок \"Company website:\" и затем либо тег <a href=\"...\">, либо прямую ссылку (http/https)\nconst regex = /<b>\\s*Company website:\\s*<\\/b>\\s*(?:<a\\s+href=\"([^\"]+)\"|((?:https?:\\/\\/)[^\\s<]+))/gi;\n\n// Регулярное выражение для поиска даты в формате \"YYYY-MM-DD\"\n// Если у вас формат даты другой, замените регулярное выражение на подходящий\nconst dateRegex = /(\\d{4}-\\d{2}-\\d{2})/;\n\nlet match;\nwhile ((match = regex.exec(description)) !== null) {\n  // Если группа 1 существует, значит ссылка взята из тега <a>, иначе из группы 2 — из plain-текста\n  let href = match[1] || match[2];\n  let outputUrl = href;\n  \n  // Если ссылка проходит через редирект Google, извлекаем значение параметра q\n  const googleRegex = /https:\\/\\/www\\.google\\.com\\/url\\?q=([^&]+)/i;\n  const googleMatch = href.match(googleRegex);\n  if (googleMatch) {\n    outputUrl = googleMatch[1];\n  }\n  \n  // Извлекаем дату из текста, прилегающего к найденному блоку.\n  // Здесь берём 200 символов начиная с позиции совпадения.\n  let context = description.slice(match.index, match.index + 200);\n  let dateMatch = dateRegex.exec(context);\n  let dateObj = dateMatch ? new Date(dateMatch[1]) : null;\n  \n  // Добавляем объект с URL и датой в массив результатов\n  records.push({ url: outputUrl, date: dateObj });\n}\n\n// Если записей не найдено, возвращаем объект с сообщением (чтобы всегда возвращались данные)\nif (records.length === 0) {\n  return [ { json: { message: \"No matching records found\" } } ];\n}\n\nlet now = new Date();\n\n// Фильтруем записи, у которых есть корректная дата\nlet recordsWithDate = records.filter(r => r.date !== null);\n\n// Если ни у одной записи нет даты, возвращаем первую найденную запись\nif (recordsWithDate.length === 0) {\n  return [ { json: records[0] } ];\n}\n\n// Находим запись, дата которой по абсолютной разнице с текущей датой минимальна\nlet closestRecord = recordsWithDate.reduce((prev, curr) => {\n  let prevDiff = Math.abs(now - prev.date);\n  let currDiff = Math.abs(now - curr.date);\n  return currDiff < prevDiff ? curr : prev;\n});\n\n// Возвращаем результат, обернутый в объект json\nreturn [ { json: closestRecord } ];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[280,-200],"id":"81cc3fb9-5303-428d-b368-1c2efb69b388","name":"Code6"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"lg@rh-s.com","mode":"list","cachedResultName":"lg@rh-s.com"},"limit":5,"timeMax":"={{ $now.plus( {hours: 1, minutes: 30}) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[-200,-200],"id":"a56e7893-cbc7-4c4e-8676-c92ff13c3645","name":"Google Calendar2","credentials":{"googleCalendarOAuth2Api":{"id":"dCmWpdsYiSYHC7XA","name":"Google Calendar account"}}},{"parameters":{"functionCode":"// Функция для округления времени до ближайшего полчасового интервала (с использованием UTC)\n// Если минуты меньше 30, округляем до :30, иначе до начала следующего часа\nfunction getHalfHourBlockUTC(dateString) {\n  const dateObj = new Date(dateString);\n  if (isNaN(dateObj.getTime())) return \"\";\n  let hours = dateObj.getUTCHours();\n  const minutes = dateObj.getUTCMinutes();\n  \n  if (minutes < 30) {\n    return `${String(hours).padStart(2, '0')}:30`;\n  } else {\n    hours = hours + 1;\n    if (hours === 24) {\n      hours = 0;\n    }\n    return `${String(hours).padStart(2, '0')}:00`;\n  }\n}\n\n// Этап 1. Получаем все входящие элементы и проводим обработку полей summary, description и end\nconst items = $input.all();\n\n// Проверяем, что items – массив\nif (!Array.isArray(items)) {\n  throw new Error(\"Ожидался массив входящих элементов\");\n}\n\nconst tempResults = items.map(item => {\n  // Если структура не соответствует ожиданиям, пропускаем элемент\n  if (!item || !item.json) return null;\n  \n  const jsonData = item.json;\n  \n  // Извлекаем поля summary и description, остальные поля сохраняем в restFields\n  const summary = jsonData.summary || \"\";\n  const description = jsonData.description || \"Нет описания\";\n  \n  // Очищаем поле summary: удаляем подстроку \"- Remote Helpers\" (без учета регистра)\n  let cleanedSummary = summary.replace(/-\\s*Remote\\s*Helpers\\s*/gi, \"\").trim();\n  \n  // Получаем оригинальное время окончания из jsonData.end\n  let originalEnd = \"\";\n  if (jsonData.end) {\n    originalEnd = jsonData.end.dateTime || jsonData.end.date || \"\";\n  }\n  \n  // Форматируем время окончания в формате HH:MM (округление до ближайшего полчасового интервала)\n  const formattedTime = originalEnd ? getHalfHourBlockUTC(originalEnd) : \"\";\n  \n  // Формируем итоговый объект.\n  // Сохраняем оригинальное время окончания (_originalEnd) для фильтрации и сортировки.\n  const finalData = {\n    ...jsonData,\n    summary: cleanedSummary,\n    description: description,\n    formattedTime: formattedTime,  // переименованное значение end\n    _originalEnd: originalEnd\n  };\n  \n  return { json: finalData };\n})\n// Фильтруем элементы, у которых не удалось сформировать объект\n.filter(item => item !== null);\n\n// Этап 2. Фильтрация дубликатов с использованием комбинации summary и округленного времени (UTC)\n// Используем _originalEnd для определения уникальности\nconst seenKeys = new Set();\nconst uniqueResults = tempResults.filter(item => {\n  const currentSummary = item.json.summary;\n  const originalEndTime = item.json._originalEnd;\n  \n  // Если время окончания задано, округляем его по UTC, иначе оставляем пустую строку\n  const normalizedTime = originalEndTime ? getHalfHourBlockUTC(originalEndTime) : \"\";\n  \n  // Если у события есть уникальный id, используем его; иначе – комбинацию summary и нормализованного времени\n  const uniqueId = item.json.id;\n  const dedupKey = uniqueId ? uniqueId : `${currentSummary}__${normalizedTime}`;\n  \n  if (seenKeys.has(dedupKey)) {\n    return false;\n  } else {\n    seenKeys.add(dedupKey);\n    return true;\n  }\n});\n\n// Этап 3. Сортировка по оригинальному времени окончания (используя _originalEnd)\nuniqueResults.sort((a, b) => {\n  const timeA = new Date(a.json._originalEnd);\n  const timeB = new Date(b.json._originalEnd);\n  return timeA - timeB;\n});\n\n// Удаляем вспомогательное поле _originalEnd из финального вывода\nconst finalResults = uniqueResults.map(item => {\n  delete item.json._originalEnd;\n  return item;\n});\n\n// Возвращаем итоговый массив уникальных, отсортированных по времени окончания\nreturn finalResults;\n"},"name":"Extract Calendar Data2","type":"n8n-nodes-base.function","typeVersion":1,"position":[40,-200],"id":"fb3acffd-d89d-4fad-946a-0c164dd0adcb"},{"parameters":{"rule":{"interval":[{"field":"hours","hoursInterval":2}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-480,-200],"id":"ecee5b6a-5c6e-474d-9548-de4342eca840","name":"Schedule Trigger1"},{"parameters":{"resource":"message","guildId":{"__rl":true,"value":"732698343951695963","mode":"list","cachedResultName":"Remote Helpers","cachedResultUrl":"https://discord.com/channels/732698343951695963"},"channelId":{"__rl":true,"value":"1285235052615176263","mode":"id"},"content":"={{ $json.joinedText }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[1280,-360],"id":"7b42f9c2-8609-4da4-968b-b35c92a7bd79","name":"Sales Comment","webhookId":"0dd4c953-a86e-41eb-9258-01d9a011e87a","credentials":{"discordBotApi":{"id":"ATASGOhmkeLExW1R","name":"Discord Bot account"}}},{"parameters":{"jsCode":"function cleanText(inputText) {\n  if (typeof inputText !== 'string') {\n    // В реальной среде автоматизации лучше выбрасывать ошибку\n    // throw new Error(\"Input must be a string.\");\n    console.error(\"Input must be a string.\");\n    return ''; // Возвращаем пустую строку в случае ошибки типа\n  }\n  const thinkTagRegex = /<think>.*?<\\/think>/gs;\n  let cleanedText = inputText.replace(thinkTagRegex, '');\n  const bracketNumberRegex = /\\[\\d+\\]/g;\n  cleanedText = cleanedText.replace(bracketNumberRegex, '');\n  return cleanedText;\n}\n\n/**\n * Cleans the input text and structures the result as an array of objects,\n * where each object represents a non-empty line from the cleaned text.\n * (Без изменений)\n * @param {string} inputText The original string with think tags and bracketed numbers.\n * @returns {Array<object>} An array of objects, e.g., [{ id: 0, lineContent: \"...\" }, ...].\n */\nfunction cleanAndStructureOutput(inputText) {\n  const cleanedFullText = cleanText(inputText);\n  const lines = cleanedFullText.split('\\n');\n  const outputArray = [];\n  let idCounter = 0;\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (trimmedLine !== '') {\n      outputArray.push({\n        id: idCounter++,\n        lineContent: trimmedLine\n      });\n    }\n  }\n  return outputArray;\n}\n\nconst text = $input.first().json.data; // Или $input[0].json.data в стандартном JS\nconst result = cleanAndStructureOutput(text);\nreturn result;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[740,-200],"id":"4f7e7128-0300-4a76-b126-09cef9a52dc4","name":"Code"},{"parameters":{"jsCode":"const items = $input.all();\nconst joinedText = items.map(item => item.json.lineContent).join('\\n');\nreturn [{ json: { joinedText } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[960,-200],"id":"e7cd8f6b-decf-4bce-a9fb-bc58ff7ae33e","name":"Code1"},{"parameters":{"resource":"message","guildId":{"__rl":true,"value":"732698343951695963","mode":"list","cachedResultName":"Remote Helpers","cachedResultUrl":"https://discord.com/channels/732698343951695963"},"sendTo":"user","userId":{"__rl":true,"value":"910144676881903646","mode":"id"},"content":"={{ $json.joinedText }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[1280,-120],"id":"e7ecb70a-a6ad-4cd3-b99f-58961a49d2ff","name":"Nikolay","webhookId":"0dd4c953-a86e-41eb-9258-01d9a011e87a","credentials":{"discordBotApi":{"id":"ATASGOhmkeLExW1R","name":"Discord Bot account"}}}],"connections":{"Code6":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Google Calendar2":{"main":[[{"node":"Extract Calendar Data2","type":"main","index":0}]]},"Extract Calendar Data2":{"main":[[{"node":"Code6","type":"main","index":0}]]},"Schedule Trigger1":{"main":[[{"node":"Google Calendar2","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Nikolay","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"c2f17770-4ff2-472c-ab24-1710564f0ed9","triggerCount":0,"tags":[]}